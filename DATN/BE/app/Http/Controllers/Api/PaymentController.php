<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\Order;
use App\Models\Payment;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Str;

class PaymentController extends Controller
{
    /**
     * üìå 1. X·ª≠ l√Ω Thanh To√°n VNPay
     */
    public function payment(Request $request, $orderId)
    {
        $order = Order::findOrFail($orderId);

        // Ki·ªÉm tra n·∫øu ƒë∆°n h√†ng ƒë√£ thanh to√°n
        if ($order->payment_status == 'Thanh to√°n th√†nh c√¥ng') {
            return response()->json(['message' => 'ƒê∆°n h√†ng ƒë√£ thanh to√°n'], 400);
        }

        // N·∫øu kh√°ch ch·ªçn COD, kh√¥ng c·∫ßn x·ª≠ l√Ω VNPay
        if ($order->payment_method == 'COD') {
            $order->update(['payment_status' => 'Ch·ªù thanh to√°n']);
            return response()->json(['message' => 'ƒê∆°n h√†ng s·∫Ω thanh to√°n khi nh·∫≠n h√†ng'], 200);
        }

        // üîπ C·∫•u h√¨nh VNPay t·ª´ .env
        $vnp_TmnCode = env('VNP_TMN_CODE'); // M√£ website VNPay c·∫•p
        $vnp_HashSecret = env('VNP_HASH_SECRET'); // Chu·ªói k√Ω b√≠ m·∫≠t VNPay
        $vnp_Url = env('VNP_URL'); // URL c·ªïng thanh to√°n

        // üîπ T·∫°o d·ªØ li·ªáu thanh to√°n
        $vnp_TxnRef = strtoupper(Str::random(10)); // M√£ giao d·ªãch duy nh·∫•t
        $vnp_Amount = $order->total_amount * 100; // VNPay y√™u c·∫ßu nh√¢n 100
        $vnp_ReturnUrl = route('payment.result', ['order_code' => $order->order_code]);

        // üîπ T·∫°o chu·ªói d·ªØ li·ªáu g·ª≠i ƒë·∫øn VNPay
        $inputData = [
            "vnp_Version" => "2.1.0",
            "vnp_TmnCode" => $vnp_TmnCode,
            "vnp_Amount" => $vnp_Amount,
            "vnp_Command" => "pay",
            "vnp_CreateDate" => now()->format('YmdHis'),
            "vnp_CurrCode" => "VND",
            "vnp_IpAddr" => request()->ip(),
            "vnp_Locale" => "vn",
            "vnp_OrderInfo" => "Thanh to√°n ƒë∆°n h√†ng " . $order->order_code,
            "vnp_OrderType" => "billpayment",
            "vnp_ReturnUrl" => $vnp_ReturnUrl,
            "vnp_TxnRef" => $vnp_TxnRef,
        ];

        // üîπ S·∫Øp x·∫øp v√† t·∫°o ch·ªØ k√Ω b·∫£o m·∫≠t (SecureHash)
        ksort($inputData);
        $query = http_build_query($inputData);
        $hashData = urldecode($query);
        $vnpSecureHash = hash_hmac('sha512', $hashData, $vnp_HashSecret);
        $inputData['vnp_SecureHash'] = $vnpSecureHash;

        // üîπ T·∫°o URL thanh to√°n VNPay
        $paymentUrl = $vnp_Url . "?" . http_build_query($inputData);

        return response()->json(['redirect_url' => $paymentUrl]);
    }

    /**
     * üìå 2. X·ª≠ l√Ω K·∫øt Qu·∫£ Thanh To√°n T·ª´ VNPay
     */
    public function paymentResult(Request $request)
    {
        $order = Order::where('order_code', $request->input('order_code'))->firstOrFail();

        // Ki·ªÉm tra n·∫øu ƒë∆°n h√†ng ƒë√£ thanh to√°n
        if ($order->payment_status == 'Thanh to√°n th√†nh c√¥ng') {
            return response()->json(['message' => 'ƒê∆°n h√†ng ƒë√£ thanh to√°n'], 200);
        }

        // Ki·ªÉm tra ph·∫£n h·ªìi t·ª´ VNPay
        if ($request->input('vnp_ResponseCode') == '00') {
            // üîπ Thanh to√°n th√†nh c√¥ng
            $order->update(['payment_status' => 'Thanh to√°n th√†nh c√¥ng']);

            // üîπ L∆∞u th√¥ng tin thanh to√°n
            Payment::create([
                'order_id' => $order->id,
                'payment_date' => now(),
                'amount' => $order->total_amount,
                'payment_method' => 'VNPay',
                'payment_status' => 'Thanh to√°n th√†nh c√¥ng',
            ]);

            return response()->json(['message' => 'Thanh to√°n th√†nh c√¥ng', 'order_id' => $order->id], 200);
        } else {
            // üîπ Thanh to√°n th·∫•t b·∫°i
            $order->update(['payment_status' => 'Thanh to√°n th·∫•t b·∫°i']);

            return response()->json(['message' => 'Thanh to√°n th·∫•t b·∫°i'], 400);
        }
    }
}
